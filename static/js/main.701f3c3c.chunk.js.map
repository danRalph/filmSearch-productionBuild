{"version":3,"sources":["components/FilmCard.js","components/FilmList.js","App.js","serviceWorker.js","index.js"],"names":["FilmCard","state","filmData","axios","get","this","props","filmID","then","res","data","setState","Title","Released","Genre","Plot","Poster","Actors","Rated","Awards","BoxOffice","Country","imdbRating","top","duration","className","style","backgroundImage","bottom","delay","substr","split","map","g","React","Component","FilmList","filmsList","searchTerm","search","event","preventDefault","Search","film","imdbID","handleChange","target","value","onSubmit","placeholder","onChange","type","length","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4UA0FeA,E,4MAlFXC,MAAQ,CACJC,SAAU,I,kEAGO,IAAD,OAChBC,IACKC,IADL,qDAGQC,KAAKC,MAAMC,OAHnB,eAMKC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBF,MAAK,SAAAC,GACF,EAAKE,SAAS,CAAET,SAAUO,S,+BAI5B,IAAD,EAaDJ,KAAKJ,MAAMC,SAXXU,EAFC,EAEDA,MACAC,EAHC,EAGDA,SACAC,EAJC,EAIDA,MACAC,EALC,EAKDA,KACAC,EANC,EAMDA,OACAC,EAPC,EAODA,OACAC,EARC,EAQDA,MACAC,EATC,EASDA,OACAC,EAVC,EAUDA,UACAC,EAXC,EAWDA,QACAC,EAZC,EAYDA,WAGJ,OAAKN,GAAqB,QAAXA,EAKX,kBAAC,IAAD,CAAMO,KAAG,EAACC,SAAU,MAChB,yBAAKC,UAAU,iBAEX,yBAAKA,UAAU,gBAEf,yBACIA,UAAU,YACVC,MAAO,CAAEC,gBAAgB,OAAD,OAASX,EAAT,SAI5B,kBAAC,IAAD,CAAQY,QAAM,EAACC,MAAO,KAC1B,yBAAKJ,UAAU,YACX,4CACI,6BAEQ,4BAAKb,GAEb,iDAAuBC,IAGnB,sCAAYK,GAEpB,wCAAcD,GACN,sCAAYE,GACZ,0CAAgBC,GAChB,uCAAaC,GACb,2CAAiBC,EAAjB,SAER,2BAAIP,GAAQA,EAAKe,OAAO,EAAG,MAC3B,yBAAKL,UAAU,YACVX,GAASA,EAAMiB,MAAM,MAAMC,KAAI,SAAAC,GAAC,OAAI,8BAAOA,WAnCjD,S,GAlCIC,IAAMC,WCkEdC,E,4MAnEXnC,MAAQ,CACJoC,UAAW,CAAC,aACZC,WAAY,I,EAGhBC,OAAS,SAAAC,GACLA,EAAMC,iBACNtC,IACKC,IADL,qDAGQ,EAAKH,MAAMqC,WAHnB,eAMK9B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,QAChBF,MAAK,SAAAC,GACF,GAAKA,EAAIiC,OAAT,CAKA,IAAML,EAAY5B,EAAIiC,OAAOV,KAAI,SAAAW,GAAI,OAAIA,EAAKC,UAC9C,EAAKjC,SAAS,CACV0B,mBANA,EAAK1B,SAAS,CAAE0B,UAAW,S,EAW3CQ,aAAe,SAAAL,GACX,EAAK7B,SAAS,CACV2B,WAAYE,EAAMM,OAAOC,S,uDAIvB,IACEV,EAAchC,KAAKJ,MAAnBoC,UAER,OACI,6BACI,kBAAC,IAAD,CAAMd,KAAG,GACL,wBAAIE,UAAU,OAAd,8BAEJ,0BAAMuB,SAAU3C,KAAKkC,QACjB,2BACIU,YAAY,oBACZC,SAAU7C,KAAKwC,eAEnB,4BAAQM,KAAK,UAAb,YAKHd,EAAUe,OAAS,EAChBf,EAAUL,KAAI,SAAAW,GAAI,OACd,kBAAC,EAAD,CAAUpC,OAAQoC,EAAMU,IAAKV,OAG7B,uBAAGlB,UAAU,OAAb,mF,GAzDDS,IAAMC,W,MCQdmB,MARf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,EAAD,QCIc8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3D,MAAK,SAAA4D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.701f3c3c.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport Flip from 'react-reveal/Flip';\r\nimport Bounce from 'react-reveal/Bounce';\r\n\r\n\r\n\r\nclass FilmCard extends React.Component {\r\n    state = {\r\n        filmData: {}\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios\r\n            .get(\r\n                `https://www.omdbapi.com/?apikey=bbd575d6&i=${\r\n                this.props.filmID\r\n                }&plot=full`\r\n            )\r\n            .then(res => res.data)\r\n            .then(res => {\r\n                this.setState({ filmData: res });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            Title,\r\n            Released,\r\n            Genre,\r\n            Plot,\r\n            Poster,\r\n            Actors,\r\n            Rated,\r\n            Awards,\r\n            BoxOffice,\r\n            Country,\r\n            imdbRating\r\n        } = this.state.filmData;\r\n\r\n        if (!Poster || Poster === 'N/A') {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <Flip top duration={1500}>\r\n                <div className=\"filmContainer\">\r\n\r\n                    <div className=\"imgContainer\">\r\n                        \r\n                    <div\r\n                        className=\"backImage\"\r\n                        style={{ backgroundImage: `url(${Poster})` }}\r\n                            />\r\n                            \r\n                        </div>\r\n                    <Bounce bottom delay={300}>   \r\n                <div className=\"filmInfo\">\r\n                    <h2>Film Details</h2>\r\n                        <div>\r\n                           \r\n                                <h1>{Title}</h1>\r\n                            \r\n                        <small>Released Date: {Released}</small>\r\n                        </div>\r\n                      \r\n                            <h4>Rated: {Rated}</h4>\r\n                       \r\n                    <p>Starring: {Actors}</p>\r\n                            <p>Awards: {Awards}</p>\r\n                            <p>Box office: {BoxOffice}</p>\r\n                            <p>Country: {Country}</p>\r\n                            <h4>IMDb score: {imdbRating} / 10</h4>\r\n                        \r\n                    <p>{Plot && Plot.substr(0, 350)}</p>\r\n                    <div className=\"tagsCont\">\r\n                        {Genre && Genre.split(', ').map(g => <span>{g}</span>)}\r\n                            </div>\r\n\r\n                        </div>\r\n                    </Bounce>\r\n                </div>\r\n                </Flip>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default FilmCard;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Fade from 'react-reveal/Fade';\r\nimport FilmCard from './FilmCard';\r\n\r\nclass FilmList extends React.Component {\r\n    state = {\r\n        filmsList: ['tt0780504'],\r\n        searchTerm: ''\r\n    };\r\n\r\n    search = event => {\r\n        event.preventDefault();\r\n        axios\r\n            .get(\r\n                `https://www.omdbapi.com/?apikey=bbd575d6&s=${\r\n                this.state.searchTerm\r\n                }&plot=full`\r\n            )\r\n            .then(res => res.data)\r\n            .then(res => {\r\n                if (!res.Search) {\r\n                    this.setState({ filmsList: [] });\r\n                    return;\r\n                }\r\n\r\n                const filmsList = res.Search.map(film => film.imdbID);\r\n                this.setState({\r\n                    filmsList\r\n                });\r\n            });\r\n    };\r\n\r\n    handleChange = event => {\r\n        this.setState({\r\n            searchTerm: event.target.value\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { filmsList } = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Fade top>\r\n                    <h1 className=\"h11\">FILM, SERIES & GAME SEARCH</h1>\r\n                \r\n                <form onSubmit={this.search}>\r\n                    <input\r\n                        placeholder=\"Search for a film\"\r\n                        onChange={this.handleChange}\r\n                    />\r\n                    <button type=\"submit\">\r\n                        SEARCH\r\n                    </button>\r\n                    </form>\r\n                </Fade>\r\n                {filmsList.length > 0 ? (\r\n                    filmsList.map(film => (\r\n                        <FilmCard filmID={film} key={film} />\r\n                    ))\r\n                ) : (\r\n                        <p className=\"err\">\r\n                            Couldn't find any film. Please search again using\r\n                            another search criteria.\r\n                        </p>\r\n                    )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default FilmList;","import React from 'react';\n\nimport FilmList from './components/FilmList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FilmList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}